/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Teampage
 * Uoslife Teampage API Swagger
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  ArticleDetailResponse,
  CommentCreateRequest,
  CommentResponse,
  CommentUpdateRequest,
  CreateArticleRequest,
  ImageUploadRequest,
  Me200,
  PageArticleListItem,
  ReactionResponse,
  SearchArticlesParams,
  UpdateArticleRequest,
} from './teampage.schemas';

export const searchArticles = (
  params: SearchArticlesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PageArticleListItem>> => {
  return axios.get(`https://apis.uoslife.team/articles`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getSearchArticlesQueryKey = (params?: SearchArticlesParams) => {
  return [
    `https://apis.uoslife.team/articles`,
    ...(params ? [params] : []),
  ] as const;
};

export const getSearchArticlesQueryOptions = <
  TData = Awaited<ReturnType<typeof searchArticles>>,
  TError = AxiosError<unknown>,
>(
  params: SearchArticlesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchArticles>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchArticlesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchArticles>>> = ({
    signal,
  }) => searchArticles(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchArticles>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SearchArticlesQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchArticles>>
>;
export type SearchArticlesQueryError = AxiosError<unknown>;

export function useSearchArticles<
  TData = Awaited<ReturnType<typeof searchArticles>>,
  TError = AxiosError<unknown>,
>(
  params: SearchArticlesParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchArticles>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchArticles>>,
          TError,
          Awaited<ReturnType<typeof searchArticles>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchArticles<
  TData = Awaited<ReturnType<typeof searchArticles>>,
  TError = AxiosError<unknown>,
>(
  params: SearchArticlesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchArticles>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchArticles>>,
          TError,
          Awaited<ReturnType<typeof searchArticles>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchArticles<
  TData = Awaited<ReturnType<typeof searchArticles>>,
  TError = AxiosError<unknown>,
>(
  params: SearchArticlesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchArticles>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSearchArticles<
  TData = Awaited<ReturnType<typeof searchArticles>>,
  TError = AxiosError<unknown>,
>(
  params: SearchArticlesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchArticles>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSearchArticlesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchSearchArticlesQuery = async <
  TData = Awaited<ReturnType<typeof searchArticles>>,
  TError = AxiosError<unknown>,
>(
  queryClient: QueryClient,
  params: SearchArticlesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchArticles>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): Promise<QueryClient> => {
  const queryOptions = getSearchArticlesQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getSearchArticlesSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof searchArticles>>,
  TError = AxiosError<unknown>,
>(
  params: SearchArticlesParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof searchArticles>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchArticlesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchArticles>>> = ({
    signal,
  }) => searchArticles(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof searchArticles>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SearchArticlesSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchArticles>>
>;
export type SearchArticlesSuspenseQueryError = AxiosError<unknown>;

export function useSearchArticlesSuspense<
  TData = Awaited<ReturnType<typeof searchArticles>>,
  TError = AxiosError<unknown>,
>(
  params: SearchArticlesParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof searchArticles>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchArticlesSuspense<
  TData = Awaited<ReturnType<typeof searchArticles>>,
  TError = AxiosError<unknown>,
>(
  params: SearchArticlesParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof searchArticles>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchArticlesSuspense<
  TData = Awaited<ReturnType<typeof searchArticles>>,
  TError = AxiosError<unknown>,
>(
  params: SearchArticlesParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof searchArticles>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSearchArticlesSuspense<
  TData = Awaited<ReturnType<typeof searchArticles>>,
  TError = AxiosError<unknown>,
>(
  params: SearchArticlesParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof searchArticles>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSearchArticlesSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createArticle = (
  createArticleRequest: CreateArticleRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ArticleDetailResponse>> => {
  return axios.post(
    `https://apis.uoslife.team/articles`,
    createArticleRequest,
    options,
  );
};

export const getCreateArticleMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createArticle>>,
    TError,
    { data: CreateArticleRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createArticle>>,
  TError,
  { data: CreateArticleRequest },
  TContext
> => {
  const mutationKey = ['createArticle'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createArticle>>,
    { data: CreateArticleRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createArticle(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateArticleMutationResult = NonNullable<
  Awaited<ReturnType<typeof createArticle>>
>;
export type CreateArticleMutationBody = CreateArticleRequest;
export type CreateArticleMutationError = AxiosError<unknown>;

export const useCreateArticle = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createArticle>>,
      TError,
      { data: CreateArticleRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createArticle>>,
  TError,
  { data: CreateArticleRequest },
  TContext
> => {
  const mutationOptions = getCreateArticleMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const addReaction = (
  articleId: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ReactionResponse>> => {
  return axios.post(
    `https://apis.uoslife.team/articles/${encodeURIComponent(String(articleId))}/likes`,
    undefined,
    options,
  );
};

export const getAddReactionMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addReaction>>,
    TError,
    { articleId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addReaction>>,
  TError,
  { articleId: number },
  TContext
> => {
  const mutationKey = ['addReaction'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addReaction>>,
    { articleId: number }
  > = (props) => {
    const { articleId } = props ?? {};

    return addReaction(articleId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddReactionMutationResult = NonNullable<
  Awaited<ReturnType<typeof addReaction>>
>;

export type AddReactionMutationError = AxiosError<unknown>;

export const useAddReaction = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addReaction>>,
      TError,
      { articleId: number },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof addReaction>>,
  TError,
  { articleId: number },
  TContext
> => {
  const mutationOptions = getAddReactionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const createComment = (
  articleId: number,
  commentCreateRequest: CommentCreateRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CommentResponse>> => {
  return axios.post(
    `https://apis.uoslife.team/articles/${encodeURIComponent(String(articleId))}/comments`,
    commentCreateRequest,
    options,
  );
};

export const getCreateCommentMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createComment>>,
    TError,
    { articleId: number; data: CommentCreateRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createComment>>,
  TError,
  { articleId: number; data: CommentCreateRequest },
  TContext
> => {
  const mutationKey = ['createComment'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createComment>>,
    { articleId: number; data: CommentCreateRequest }
  > = (props) => {
    const { articleId, data } = props ?? {};

    return createComment(articleId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof createComment>>
>;
export type CreateCommentMutationBody = CommentCreateRequest;
export type CreateCommentMutationError = AxiosError<unknown>;

export const useCreateComment = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createComment>>,
      TError,
      { articleId: number; data: CommentCreateRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createComment>>,
  TError,
  { articleId: number; data: CommentCreateRequest },
  TContext
> => {
  const mutationOptions = getCreateCommentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const uploadThumbnailImage = (
  imageUploadRequest: ImageUploadRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<string>> => {
  return axios.post(
    `https://apis.uoslife.team/articles/uploadThumbnailImage`,
    imageUploadRequest,
    {
      responseType: 'text',
      ...options,
    },
  );
};

export const getUploadThumbnailImageMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadThumbnailImage>>,
    TError,
    { data: ImageUploadRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof uploadThumbnailImage>>,
  TError,
  { data: ImageUploadRequest },
  TContext
> => {
  const mutationKey = ['uploadThumbnailImage'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof uploadThumbnailImage>>,
    { data: ImageUploadRequest }
  > = (props) => {
    const { data } = props ?? {};

    return uploadThumbnailImage(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UploadThumbnailImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof uploadThumbnailImage>>
>;
export type UploadThumbnailImageMutationBody = ImageUploadRequest;
export type UploadThumbnailImageMutationError = AxiosError<unknown>;

export const useUploadThumbnailImage = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof uploadThumbnailImage>>,
      TError,
      { data: ImageUploadRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof uploadThumbnailImage>>,
  TError,
  { data: ImageUploadRequest },
  TContext
> => {
  const mutationOptions = getUploadThumbnailImageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const uploadImage = (
  imageUploadRequest: ImageUploadRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<string>> => {
  return axios.post(
    `https://apis.uoslife.team/articles/uploadImage`,
    imageUploadRequest,
    {
      responseType: 'text',
      ...options,
    },
  );
};

export const getUploadImageMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadImage>>,
    TError,
    { data: ImageUploadRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof uploadImage>>,
  TError,
  { data: ImageUploadRequest },
  TContext
> => {
  const mutationKey = ['uploadImage'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof uploadImage>>,
    { data: ImageUploadRequest }
  > = (props) => {
    const { data } = props ?? {};

    return uploadImage(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UploadImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof uploadImage>>
>;
export type UploadImageMutationBody = ImageUploadRequest;
export type UploadImageMutationError = AxiosError<unknown>;

export const useUploadImage = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof uploadImage>>,
      TError,
      { data: ImageUploadRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof uploadImage>>,
  TError,
  { data: ImageUploadRequest },
  TContext
> => {
  const mutationOptions = getUploadImageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const findArticle = (
  articleId: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ArticleDetailResponse>> => {
  return axios.get(
    `https://apis.uoslife.team/articles/${encodeURIComponent(String(articleId))}`,
    options,
  );
};

export const getFindArticleQueryKey = (articleId?: number) => {
  return [`https://apis.uoslife.team/articles/${articleId}`] as const;
};

export const getFindArticleQueryOptions = <
  TData = Awaited<ReturnType<typeof findArticle>>,
  TError = AxiosError<unknown>,
>(
  articleId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findArticle>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFindArticleQueryKey(articleId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findArticle>>> = ({
    signal,
  }) => findArticle(articleId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!articleId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof findArticle>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FindArticleQueryResult = NonNullable<
  Awaited<ReturnType<typeof findArticle>>
>;
export type FindArticleQueryError = AxiosError<unknown>;

export function useFindArticle<
  TData = Awaited<ReturnType<typeof findArticle>>,
  TError = AxiosError<unknown>,
>(
  articleId: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findArticle>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findArticle>>,
          TError,
          Awaited<ReturnType<typeof findArticle>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFindArticle<
  TData = Awaited<ReturnType<typeof findArticle>>,
  TError = AxiosError<unknown>,
>(
  articleId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findArticle>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findArticle>>,
          TError,
          Awaited<ReturnType<typeof findArticle>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFindArticle<
  TData = Awaited<ReturnType<typeof findArticle>>,
  TError = AxiosError<unknown>,
>(
  articleId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findArticle>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useFindArticle<
  TData = Awaited<ReturnType<typeof findArticle>>,
  TError = AxiosError<unknown>,
>(
  articleId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findArticle>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getFindArticleQueryOptions(articleId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchFindArticleQuery = async <
  TData = Awaited<ReturnType<typeof findArticle>>,
  TError = AxiosError<unknown>,
>(
  queryClient: QueryClient,
  articleId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findArticle>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): Promise<QueryClient> => {
  const queryOptions = getFindArticleQueryOptions(articleId, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getFindArticleSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof findArticle>>,
  TError = AxiosError<unknown>,
>(
  articleId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findArticle>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFindArticleQueryKey(articleId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findArticle>>> = ({
    signal,
  }) => findArticle(articleId, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof findArticle>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FindArticleSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof findArticle>>
>;
export type FindArticleSuspenseQueryError = AxiosError<unknown>;

export function useFindArticleSuspense<
  TData = Awaited<ReturnType<typeof findArticle>>,
  TError = AxiosError<unknown>,
>(
  articleId: number,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findArticle>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFindArticleSuspense<
  TData = Awaited<ReturnType<typeof findArticle>>,
  TError = AxiosError<unknown>,
>(
  articleId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findArticle>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFindArticleSuspense<
  TData = Awaited<ReturnType<typeof findArticle>>,
  TError = AxiosError<unknown>,
>(
  articleId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findArticle>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useFindArticleSuspense<
  TData = Awaited<ReturnType<typeof findArticle>>,
  TError = AxiosError<unknown>,
>(
  articleId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findArticle>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getFindArticleSuspenseQueryOptions(articleId, options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateArticle = (
  articleId: number,
  updateArticleRequest: UpdateArticleRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ArticleDetailResponse>> => {
  return axios.patch(
    `https://apis.uoslife.team/articles/${encodeURIComponent(String(articleId))}`,
    updateArticleRequest,
    options,
  );
};

export const getUpdateArticleMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateArticle>>,
    TError,
    { articleId: number; data: UpdateArticleRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateArticle>>,
  TError,
  { articleId: number; data: UpdateArticleRequest },
  TContext
> => {
  const mutationKey = ['updateArticle'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateArticle>>,
    { articleId: number; data: UpdateArticleRequest }
  > = (props) => {
    const { articleId, data } = props ?? {};

    return updateArticle(articleId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateArticleMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateArticle>>
>;
export type UpdateArticleMutationBody = UpdateArticleRequest;
export type UpdateArticleMutationError = AxiosError<unknown>;

export const useUpdateArticle = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateArticle>>,
      TError,
      { articleId: number; data: UpdateArticleRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateArticle>>,
  TError,
  { articleId: number; data: UpdateArticleRequest },
  TContext
> => {
  const mutationOptions = getUpdateArticleMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const deleteComment = (
  articleId: number,
  commentId: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<null>> => {
  return axios.delete(
    `https://apis.uoslife.team/articles/${encodeURIComponent(String(articleId))}/comments/${encodeURIComponent(String(commentId))}`,
    options,
  );
};

export const getDeleteCommentMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteComment>>,
    TError,
    { articleId: number; commentId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteComment>>,
  TError,
  { articleId: number; commentId: number },
  TContext
> => {
  const mutationKey = ['deleteComment'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteComment>>,
    { articleId: number; commentId: number }
  > = (props) => {
    const { articleId, commentId } = props ?? {};

    return deleteComment(articleId, commentId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteComment>>
>;

export type DeleteCommentMutationError = AxiosError<unknown>;

export const useDeleteComment = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteComment>>,
      TError,
      { articleId: number; commentId: number },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteComment>>,
  TError,
  { articleId: number; commentId: number },
  TContext
> => {
  const mutationOptions = getDeleteCommentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const updateComment = (
  articleId: number,
  commentId: number,
  commentUpdateRequest: CommentUpdateRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CommentResponse>> => {
  return axios.patch(
    `https://apis.uoslife.team/articles/${encodeURIComponent(String(articleId))}/comments/${encodeURIComponent(String(commentId))}`,
    commentUpdateRequest,
    options,
  );
};

export const getUpdateCommentMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateComment>>,
    TError,
    { articleId: number; commentId: number; data: CommentUpdateRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateComment>>,
  TError,
  { articleId: number; commentId: number; data: CommentUpdateRequest },
  TContext
> => {
  const mutationKey = ['updateComment'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateComment>>,
    { articleId: number; commentId: number; data: CommentUpdateRequest }
  > = (props) => {
    const { articleId, commentId, data } = props ?? {};

    return updateComment(articleId, commentId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateComment>>
>;
export type UpdateCommentMutationBody = CommentUpdateRequest;
export type UpdateCommentMutationError = AxiosError<unknown>;

export const useUpdateComment = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateComment>>,
      TError,
      { articleId: number; commentId: number; data: CommentUpdateRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateComment>>,
  TError,
  { articleId: number; commentId: number; data: CommentUpdateRequest },
  TContext
> => {
  const mutationOptions = getUpdateCommentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const me = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Me200>> => {
  return axios.get(`https://apis.uoslife.team/auth/me`, options);
};

export const getMeQueryKey = () => {
  return [`https://apis.uoslife.team/auth/me`] as const;
};

export const getMeQueryOptions = <
  TData = Awaited<ReturnType<typeof me>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof me>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof me>>> = ({ signal }) =>
    me({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof me>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MeQueryResult = NonNullable<Awaited<ReturnType<typeof me>>>;
export type MeQueryError = AxiosError<unknown>;

export function useMe<
  TData = Awaited<ReturnType<typeof me>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof me>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof me>>,
          TError,
          Awaited<ReturnType<typeof me>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMe<
  TData = Awaited<ReturnType<typeof me>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof me>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof me>>,
          TError,
          Awaited<ReturnType<typeof me>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMe<
  TData = Awaited<ReturnType<typeof me>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof me>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useMe<
  TData = Awaited<ReturnType<typeof me>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof me>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMeQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchMeQuery = async <
  TData = Awaited<ReturnType<typeof me>>,
  TError = AxiosError<unknown>,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof me>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): Promise<QueryClient> => {
  const queryOptions = getMeQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getMeSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof me>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<Awaited<ReturnType<typeof me>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof me>>> = ({ signal }) =>
    me({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof me>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MeSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof me>>>;
export type MeSuspenseQueryError = AxiosError<unknown>;

export function useMeSuspense<
  TData = Awaited<ReturnType<typeof me>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof me>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMeSuspense<
  TData = Awaited<ReturnType<typeof me>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof me>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMeSuspense<
  TData = Awaited<ReturnType<typeof me>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof me>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useMeSuspense<
  TData = Awaited<ReturnType<typeof me>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof me>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMeSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteArticle = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<null>> => {
  return axios.delete(`https://apis.uoslife.team/articles/articleId`, options);
};

export const getDeleteArticleMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteArticle>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteArticle>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['deleteArticle'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteArticle>>,
    void
  > = () => {
    return deleteArticle(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteArticleMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteArticle>>
>;

export type DeleteArticleMutationError = AxiosError<unknown>;

export const useDeleteArticle = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteArticle>>,
      TError,
      void,
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteArticle>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getDeleteArticleMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
