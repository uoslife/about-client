name: Deployment

on:
  workflow_dispatch:
    inputs:
      use_cache:
        description: 'Docker 빌드 캐시 사용'
        required: false
        default: true
        type: boolean
  push:
    branches: ['main']

permissions:
  id-token: write
  contents: read

jobs:
  deployment:
    name: Deployment

    runs-on:
      - runs-on=${{ github.run_id }}
      - runner=8cpu-linux-x64

    env:
      # Dockerfile
      DOCKER_FILE: ./apps/teampage/Dockerfile
      DOCKER_STAGE: runner
      DOCKER_PLATFORM: amd64

      # AWS
      AWS_REGION: ap-northeast-2
      AWS_ROLE: ${{ secrets.AWS_ROLE_ARN }}

      # Elastic Container Registry
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      ECR_NAMESPACE: ${{ secrets.ECR_NAMESPACE }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

      # Elastic Container Service
      ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
      ECS_SERVICE: ${{ secrets.ECS_COMMON_PREFIX }}
      ECS_TASK: ${{ secrets.ECS_COMMON_PREFIX }}
      ECS_CONTAINER: ${{ secrets.ECS_COMMON_PREFIX }}

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: version
        name: Generate Version Code
        run: |
          echo "version=$(date +'%Y%m%d%H%M%S')" >> "$GITHUB_OUTPUT"
          echo "VERSION=$(date +'%Y%m%d%H%M%S')" >> "$GITHUB_ENV"

      - name: Create environment file
        run: |
          echo "NOTION_API_KEY=$NOTION_API_KEY" >> apps/teampage/.env
          echo "NOTION_PEOPLE_DATABASE_ID=$NOTION_PEOPLE_DATABASE_ID" >> apps/teampage/.env
          echo "KEYCLOAK_CLIENT_ID=$KEYCLOAK_CLIENT_ID" >> apps/teampage/.env
          echo "KEYCLOAK_CLIENT_SECRET=$KEYCLOAK_CLIENT_SECRET" >> apps/teampage/.env
          echo "KEYCLOAK_ISSUER=$KEYCLOAK_ISSUER" >> apps/teampage/.env
          echo "NEXTAUTH_SECRET=$NEXTAUTH_SECRET" >> apps/teampage/.env
          echo "NEXTAUTH_URL=$NEXTAUTH_URL" >> apps/teampage/.env
        env:
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
          NOTION_PEOPLE_DATABASE_ID: ${{ secrets.NOTION_PEOPLE_DATABASE_ID }}
          KEYCLOAK_CLIENT_ID: ${{ secrets.KEYCLOAK_CLIENT_ID }}
          KEYCLOAK_CLIENT_SECRET: ${{ secrets.KEYCLOAK_CLIENT_SECRET }}
          KEYCLOAK_ISSUER: ${{ secrets.KEYCLOAK_ISSUER }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE }}
          role-session-name: GithubDeployment

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image to ECR (with cache)
        if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.use_cache == true) }}
        uses: docker/build-push-action@v4
        with:
          push: true
          context: .
          file: ${{ env.DOCKER_FILE }}
          target: ${{ env.DOCKER_STAGE }}
          platforms: linux/${{ env.DOCKER_PLATFORM }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            NOTION_API_KEY=${{ secrets.NOTION_API_KEY }}
            NOTION_PEOPLE_DATABASE_ID=${{ secrets.NOTION_PEOPLE_DATABASE_ID }}
            KEYCLOAK_CLIENT_ID=${{ secrets.KEYCLOAK_CLIENT_ID }}
            KEYCLOAK_CLIENT_SECRET=${{ secrets.KEYCLOAK_CLIENT_SECRET }}
            KEYCLOAK_ISSUER=${{ secrets.KEYCLOAK_ISSUER }}
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.VERSION }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Build and Push Docker Image to ECR (no cache)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.use_cache == false }}
        uses: docker/build-push-action@v4
        with:
          push: true
          context: .
          file: ${{ env.DOCKER_FILE }}
          target: ${{ env.DOCKER_STAGE }}
          platforms: linux/${{ env.DOCKER_PLATFORM }}
          no-cache: true
          build-args: |
            NODE_ENV=production
            NOTION_API_KEY=${{ secrets.NOTION_API_KEY }}
            NOTION_PEOPLE_DATABASE_ID=${{ secrets.NOTION_PEOPLE_DATABASE_ID }}
            KEYCLOAK_CLIENT_ID=${{ secrets.KEYCLOAK_CLIENT_ID }}
            KEYCLOAK_CLIENT_SECRET=${{ secrets.KEYCLOAK_CLIENT_SECRET }}
            KEYCLOAK_ISSUER=${{ secrets.KEYCLOAK_ISSUER }}
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.VERSION }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Download Task Definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK }} \
            --query taskDefinition \
            --region ${{ env.AWS_REGION }} \
            > task-definition.json

      - name: Update Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.ECS_CONTAINER }}
          image: '${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.VERSION }}'

      - name: Clean up environment file
        if: always()
        run: |
          rm -f apps/teampage/.env
        shell: bash

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: ${{ env.ECS_SERVICE }}
          wait-for-service-stability: true
